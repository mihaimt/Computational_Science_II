# GENERAL INFORMATION
The programs 'oscillation_force' and 'oscillation_mass' suggest solutions to avoid the oscillations in the 'grav_force_lvlx' program.
The 'grav_force' program calculates the LEVEL 0 force grid without using (too) much memory, analogously do programs grav_force_lvl1 and grav_force_lvl2

The Makefile included compiles all the programs at once, with 'make all', or individually for make [PROGRAM_NAME]... default is set to the current programs.
Use/run the programs with ./[PROGRAM] [LEVEL], e.g. ./grav_force_lvlx 3

The program ./bin/force_plot.py plots all the files in the directory ./data/ and saves them in ./pictures/

# OSCILLATION_PROGRAMS
The program 'oscillation_force' calculates the force in the corners of the LEVEL grid and tries to find a direct estimate for the other cells.
This method may have errors and perhaps be wrong, but has by far the fastest cpu times.
TODO: boundary conditions are unclear and have yet to be corrected.

The program 'oscillation_mass' calculates the force in all LEVEL 0 points, making a shift of the mass points and grid/points that are not in a corner of the LEVEL grid from the nearest lower left corner.
This method can still be improved, but is right now by far the slowest program, even slower than the LEVEL 0 calculation with grav_force! 
TODO: make sure calculations are correct, improve cpu times

# ESTIMATES
The estimates are done with the neighboring cells to the right, e.g. (i,j) , (i+1,j), (i,j+1), (i+1,j+1).
They are multiplied by the factors by with they are overlapping the unshifted grid, with the iterators ishift, jshift in range of [0...2**LEVEL-1]:

NEW CELL(i,j) = [ (2**LEVEL-ishift)*(2**LEVEL-jshift)	* CELL(i,j)
		 +(2**LEVEL-ishift)*jshift		* CELL(i,j+1)
		 +ishift*(2**LEVEL-jshift)		* CELL(i+1,j)
		 +ishift*jshift				* CELL(i+1,j+1)
		] * 1./2**(2*LEVEL)

These factors were used for the force grid and the mass grid with almost the same results, the force estimate looks prettier though...

